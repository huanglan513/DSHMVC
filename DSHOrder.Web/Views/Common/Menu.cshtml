@model IEnumerable<DSHOrder.Entity.Function>
<script type="text/javascript" src="@Url.Content("~/Scripts/ddaccordion.js")"></script>
<script type="text/javascript">
    //Initialize Arrow Side Menu:
    ddaccordion.init({
        headerclass: "menuheaders", //Shared CSS class name of headers group
        contentclass: "menucontents", //Shared CSS class name of contents group
        revealtype: "click", //Reveal content when user clicks or onmouseover the header? Valid value: "click", or "mouseover"
        mouseoverdelay: 200, //if revealtype="mouseover", set delay in milliseconds before header expands onMouseover
        collapseprev: true, //Collapse previous content (so only one open at any time)? true/false 
        defaultexpanded: [0], //index of content(s) open by default [index1, index2, etc]. [] denotes no content.
        onemustopen: false, //Specify whether at least one header should be open always (so never all headers closed)
        animatedefault: false, //Should contents open by default be animated into view?
        persiststate: true, //persist state of opened contents within browser session?
        toggleclass: ["unselected", "selected"], //Two CSS classes to be applied to the header when it's collapsed and expanded, respectively ["class1", "class2"]
        togglehtml: ["none", "", ""], //Additional HTML added to the header when it's collapsed and expanded, respectively  ["position", "html1", "html2"] (see docs)
        animatespeed: 500, //speed of animation: integer in milliseconds (ie: 200), or keywords "fast", "normal", or "slow"
        oninit: function (expandedindices) { //custom code to run when headers have initalized
            //do nothing
        },
        onopenclose: function (header, index, state, isuseractivated) { //custom code to run whenever a header is opened or closed
            //do nothing
        }
    })
</script>
<style type="text/css">
.arrowsidemenu { width: 180px; margin:0 auto; border-style: solid solid none solid; border-color: #94AA74; border-width: 1px; }
.arrowsidemenu div a { font: bold 12px Verdana, Arial, Helvetica, sans-serif; display: block;  height: 24px; padding: 4px 0 4px 10px; line-height: 24px; text-decoration: none; background-image:  url(../../Content/Images/arrowgreen.gif);background-position:top left;background-repeat:repeat;
}
.arrowsidemenu div a:link, .arrowsidemenu div a:visited { color: #26370A; }
.arrowsidemenu div a:hover { background-position: 100% -32px; }
.arrowsidemenu div.unselected a { color: #6F3700; }
.arrowsidemenu div.selected a {  color: #000000; background-position: 100% -64px !important; }
.arrowsidemenu ul { list-style-type: none; margin: 0; padding: 0; }
.arrowsidemenu ul li { border-bottom: 1px solid #a1c67b; }
.arrowsidemenu ul li a { display: block; font: normal 12px Verdana, Arial, Helvetica, sans-serif; text-decoration: none; color: black; padding: 5px 0; padding-left: 10px; border-left: 10px double #a1c67b; }
.arrowsidemenu ul li a:hover { background: #d5e5c1; }
</style>
<div class="arrowsidemenu">
@foreach (var item in Model)
{
    if (item.ParentID != 0) { continue; }
    IEnumerable<DSHOrder.Entity.Function> list = Model.Where(p => p.ParentID == item.FunctionID);
    if (list.Count() > 0)
    {
            <div class="menuheaders"><a href="#" title="CSS">@item.FunctionName</a></div>
        <ul class="menucontents">
            @foreach (var subItem in list)
            {
                <li><a href="@Url.Action("Navigation", "Common", new { @functionId = subItem.FunctionID })" >@subItem.FunctionName</a></li>
            }
        </ul>
    }
}
</div>