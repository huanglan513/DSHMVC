using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using DSHOrder.Entity;
using System.Data.Objects.DataClasses;
using DSHOrder.Service.Interface;
using DSHOrder.Service;
using System.Web.Mvc;
using System.Collections;

namespace DSHOrder.Web.Models
{
    public class GroupByFlowInfo
    {
        #region all objects for model

        #region objects for model

        public StartFormModel StartForm { get; set; }
        public List<GroupByItem> GroupByItemModel { get; set; }
        public List<Payment> PaymentModel { get; set; }
        public string Sales { get; set; }
        public GroupByGroup GroupByGroup { get; set; }

        #endregion

        #region objects for model (read only)

        public SelectList PaymentTypeList
        {
            get
            {
                ICodeTableService codeTableService = new CodeTableService();
                IList<CodeTable> paymentTypeList = codeTableService.GetCodeTablesByType((int)ComUtil.CodeType.PaymentType);
                var list = new SelectList(paymentTypeList, "CodeValue", "CodeDesc");

                return list;
            }
        }
        public SelectList CityList
        {
            get
            {
                ICityService cityService = new CityService();
                IList<City> cityList = cityService.GetAllCities();

                Entity.City city = new Entity.City();
                city.CityID = -1;
                city.CityName = "请选择城市";
                cityList.Insert(0, city);

                var list = new SelectList(cityList, "CityID", "CityName");

                return list;
            }
        }
        public SelectList DepartmentList
        {
            get
            {
                IDepartmentService departmentService = new DepartmentService();
                var departmentList = departmentService.GetAllDepartments();

                Entity.Department department = new Entity.Department();
                department.DepartmentID = -1;
                department.DepartmentName = "请选择部门";
                departmentList.Insert(0, department);

                var list = new SelectList(departmentList, "DepartmentID", "DepartmentName");

                return list;
            }
        }
        public SelectList EmptySelectList
        {
            get
            {
                var al = new ArrayList();
                var list = new SelectList(al);

                return list;
            }
        }

        public SelectList SettlementDateList
        {
            get
            {
                var al = new List<int>();
                for (int i = 1; i <= 31; i++)
                {
                    al.Add(i);
                }
                var list = new SelectList(al);

                return list;
            }
        }

        

        #endregion

        #endregion

        public GroupByFlowInfo() : base()
        { 
        
        }

        #region parse method

        public void ParseToModel()
        {
            this.GroupByItemModel = GetListFromEntityCollection(this.GroupByGroup.GroupByItem);
           // this.PaymentModel = GetListFromEntityCollection(this.GroupByGroup.Payment);

            if (this.GroupByGroup.GroupBySales != null)
            {
                this.GroupByGroup.GroupBySales.ToList().ForEach(s => this.Sales += "|" + s.GroupBySalesID.ToString());
            }
        }
        public void ParseFromModel()
        {
            this.GroupByGroup.GroupByItem = GetEntityCollectionFromList(this.GroupByItemModel);
           //  this.GroupByGroup.Payment = GetEntityCollectionFromList(this.PaymentModel);

            this.Sales = this.Sales.Trim('|');
            this.GroupByGroup.GroupBySales = new EntityCollection<GroupBySales>();
            this.Sales.Split('|').ToList().ForEach(id =>
                {
                    Entity.GroupBySales s = new GroupBySales();
                    s.UserID = int.Parse(id);
                    s.GroupByGroupID = this.GroupByGroup.GroupByGroupID;

                    this.GroupByGroup.GroupBySales.Add(s);
                }
            );
        }

        #endregion

        #region private method

        private List<TEntity> GetListFromEntityCollection<TEntity>(EntityCollection<TEntity> ec) where TEntity : class
        {
            var listReturn = new List<TEntity>();

            if (ec != null)
            {
                ec.ToList().ForEach(m => listReturn.Add(m));
            }

            return listReturn;
        }
        private EntityCollection<TEntity> GetEntityCollectionFromList<TEntity>(List<TEntity> l) where TEntity : class
        {
            var ecReturn = new EntityCollection<TEntity>();

            if (l != null)
            {
                l.ForEach(m => ecReturn.Add(m));
            }

            return ecReturn;
        }

        #endregion
    }
}